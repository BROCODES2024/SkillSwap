================================================================================
                    SKILL SWAP PLATFORM - COMPLETE SETUP GUIDE
================================================================================

This guide will help you set up and run the complete Skill Swap Platform with
both frontend (React) and backend (Node.js/Express/MongoDB).

================================================================================
                                PREREQUISITES
================================================================================

1. Node.js (v16 or higher) - Download from https://nodejs.org/
2. MongoDB (v5 or higher) - Download from https://www.mongodb.com/try/download/community
3. Git (for version control)
4. A code editor (VS Code recommended)

================================================================================
                                STEP 1: MONGODB SETUP
================================================================================

Option A: Local MongoDB Installation
1. Download and install MongoDB Community Server
2. Start MongoDB service:
   - Windows: MongoDB runs as a service automatically
   - Mac/Linux: sudo systemctl start mongod
3. Verify MongoDB is running: mongosh

Option B: MongoDB Atlas (Cloud - Recommended for beginners)
1. Go to https://www.mongodb.com/atlas
2. Create a free account
3. Create a new cluster
4. Get your connection string
5. Replace the MONGODB_URI in your .env file

================================================================================
                                STEP 2: BACKEND SETUP
================================================================================

1. Navigate to backend directory:
   cd backend

2. Install dependencies:
   npm install

3. Create environment file:
   copy env.example .env

4. Edit .env file with your configuration:
   - Set MONGODB_URI to your MongoDB connection string
   - Set JWT_SECRET to a secure random string
   - Set FRONTEND_URL to http://localhost:3000
   - For email functionality, configure your email service

5. Create uploads directory:
   mkdir uploads

6. Start the backend server:
   npm run dev

   The backend should now be running on http://localhost:5000

================================================================================
                                STEP 3: FRONTEND SETUP
================================================================================

1. Navigate to frontend directory:
   cd frontend

2. Install dependencies:
   npm install

3. Start the frontend development server:
   npm start

   The frontend should now be running on http://localhost:3000

================================================================================
                                STEP 4: TESTING THE APPLICATION
================================================================================

1. Open your browser and go to http://localhost:3000

2. Test Registration:
   - Click "Register" 
   - Fill in the form with:
     * Name: Test User
     * Email: test@example.com (or any valid email format)
     * Password: Test123!
     * Confirm Password: Test123!
     * Location: Test City
     * Skills Offered: Type "JavaScript" and press Enter, then "React" and press Enter
     * Skills Wanted: Type "Python" and press Enter, then "Django" and press Enter
     * Availability: Check any options
   - Submit the form

3. Test Login:
   - Use the credentials you just created
   - Or use demo accounts:
     * Regular User: user@example.com / password123
     * Admin User: admin@example.com / admin123

4. Test Features:
   - Browse users
   - Send swap requests
   - Update profile
   - Test admin features (if logged in as admin)

================================================================================
                                STEP 5: DATABASE VERIFICATION
================================================================================

1. Connect to MongoDB:
   mongosh

2. Switch to your database:
   use skill-swap-platform

3. Check collections:
   show collections

4. View users:
   db.users.find().pretty()

5. View swaps:
   db.swaps.find().pretty()

================================================================================
                                STEP 6: EMAIL CONFIGURATION
================================================================================

For Development (Testing):
- The app uses Ethereal Email for testing
- Check the console logs for email preview URLs
- No real emails will be sent

For Production:
1. Set up a real email service (Gmail, SendGrid, etc.)
2. Update .env file with your email credentials:
   EMAIL_SERVICE=gmail
   EMAIL_USER=your-email@gmail.com
   EMAIL_PASS=your-app-password

================================================================================
                                STEP 7: PRODUCTION DEPLOYMENT
================================================================================

Backend Deployment:
1. Set NODE_ENV=production in .env
2. Use a process manager like PM2:
   npm install -g pm2
   pm2 start server.js --name skill-swap-backend

Frontend Deployment:
1. Build the frontend:
   cd frontend
   npm run build
2. Deploy the build folder to your hosting service

================================================================================
                                TROUBLESHOOTING
================================================================================

Common Issues:

1. MongoDB Connection Error:
   - Check if MongoDB is running
   - Verify connection string in .env
   - Check firewall settings

2. Port Already in Use:
   - Change PORT in .env file
   - Kill existing processes on the port

3. CORS Errors:
   - Verify FRONTEND_URL in backend .env
   - Check CORS configuration in server.js

4. JWT Errors:
   - Ensure JWT_SECRET is set in .env
   - Check token expiration settings

5. Email Not Sending:
   - Check email credentials in .env
   - Verify email service configuration
   - Check console logs for errors

================================================================================
                                API ENDPOINTS
================================================================================

Authentication:
POST /api/auth/register - Register new user
POST /api/auth/login - Login user
GET /api/auth/me - Get current user
POST /api/auth/forgot-password - Forgot password
POST /api/auth/reset-password/:token - Reset password
POST /api/auth/verify-email/:token - Verify email

Users:
GET /api/users/search - Search users
GET /api/users/profile/:id - Get user profile
PUT /api/users/profile - Update profile

Swaps:
POST /api/swaps/request - Create swap request
GET /api/swaps/my-swaps - Get user swaps
PUT /api/swaps/:id/accept - Accept swap
PUT /api/swaps/:id/reject - Reject swap

Notifications:
GET /api/notifications - Get notifications
PUT /api/notifications/mark-read - Mark as read

Admin:
GET /api/admin/dashboard - Admin dashboard
GET /api/admin/users - Get all users
PUT /api/admin/users/:id/ban - Ban user

================================================================================
                                FEATURES IMPLEMENTED
================================================================================

✅ User Authentication:
- Registration with email verification
- Login with JWT tokens
- Password reset functionality
- Email validation (all formats supported)

✅ User Management:
- Profile creation and editing
- Skills management (type and press Enter)
- Availability settings
- Public/private profiles

✅ Skill Exchange:
- Browse users by skills
- Send and receive swap requests
- Accept/reject swaps
- Rating system after completion

✅ Real-time Features:
- Live notifications
- Real-time swap updates
- Socket.IO integration

✅ Admin Features:
- User management
- Ban/unban users
- Platform analytics
- Content moderation

✅ Security:
- Input validation
- Rate limiting
- CORS protection
- JWT authentication

✅ Database:
- MongoDB with Mongoose
- Proper relationships
- Indexing for performance
- Data validation

================================================================================
                                NEXT STEPS
================================================================================

1. Test all features thoroughly
2. Add more admin functionality
3. Implement file upload for profile photos
4. Add messaging system between users
5. Implement advanced search and filtering
6. Add mobile responsiveness improvements
7. Set up monitoring and logging
8. Deploy to production

================================================================================
                                SUPPORT
================================================================================

If you encounter any issues:
1. Check the console logs for errors
2. Verify all environment variables are set
3. Ensure MongoDB is running
4. Check network connectivity
5. Review the troubleshooting section above

For additional help, check the project documentation or create an issue in the repository.

================================================================================
                                ENVIRONMENT VARIABLES REFERENCE
================================================================================

Required Variables:
NODE_ENV=development
PORT=5000
MONGODB_URI=mongodb://localhost:27017/skill-swap-platform
JWT_SECRET=your-secret-key
FRONTEND_URL=http://localhost:3000

Optional Variables:
EMAIL_SERVICE=gmail
EMAIL_USER=your-email@gmail.com
EMAIL_PASS=your-app-password
FROM_NAME=Skill Swap Platform
FROM_EMAIL=noreply@skillswapplatform.com

================================================================================
                                COMPLETE!
================================================================================

Your Skill Swap Platform is now ready to use! 

Frontend: http://localhost:3000
Backend: http://localhost:5000
Database: MongoDB (local or Atlas)

Happy coding! 🚀 